	ORG $8000
MAX		DS.W	1
INDMAX	DS.W	1
MIN		DS.W	1
INDMIN	DS.W	1
M		EQU	4	*dim colonne
N		EQU	3	*dim righe
OFF_M		EQU	8
OFF_N		EQU	10
OFF_ADDR	EQU	12
OFF_INDMAX	EQU	16
OFF_MAX	EQU	18
OFF_INDMIN	EQU	16
OFF_MIN	EQU	18
OFF_MEDIA	EQU	16
OFF_IMAX 	EQU	12
OFF_IMIN	EQU	8
OFF_M2	EQU	16

IMAGE		DC.B	3,254,127,140
		DC.B	1,0,2,170
		DC.B	253,254,254,255

	ORG $8100
MAIN		LEA 		IMAGE,A0	*caricamento dell'indirizzo della matrice nel registro A0
RIC_MAX	ADDA.L	#-2,A7		*riserviamo due byte per memorizzare il MAX: lo SP deve essere sempre pari,
						*se sottrai 1 byte automaticamente ne verranno sottratti 2 per mantenerlo pari
						*poichè ASIM questo non lo fa ti conviene riservare direttamente 2 byte
		ADDA.L	#-2,A7		*riserviamo due byte per memorizzare INDMAX
		MOVE.L	A0,-(A7)	*push indirizzo della matrice (A0)
		MOVE.W	#N,-(A7)	*push della dimensione delle righe
		MOVE.W	#M,-(A7)	*push della dimensione delle colonne
		JSR		FIND_MAX	*JSR è un salto incondizionato che ha l'effetto di salvare automaticamente in cima allo stack l'indirizzo di ritorno
		ADDQ		#8,A7		*pulizia dello stack
		MOVE.W	(A7)+,INDMAX	*salvataggio indice max
		MOVE.W	(A7)+,MAX	*salvataggio max
		*CLR D0
RIC_MIN	ADDA.L	#-2,A7		*riserviamo due byte per memorizzare il MIN
		ADDA.L	#-2,A7	*riserviamo due byte per memorizzare INDMIN
		MOVE.L	A0,-(A7)	*push indirizzo della matrice (A0)
		MOVE.W	#N,-(A7)	*push della dimensione delle righe
		MOVE.W	#M,-(A7)	*push della dimensione delle colonne
		JSR		FIND_MIN
		ADDQ		#8,A7		*pulizia delo stack
		MOVE.W	(A7)+,INDMIN	*salvataggio indice min
		MOVE.W	(A7)+,MIN	*salvataggio min

SCAMBIO	*la funzione di scambio deve avere in ingresso l'indirizzo della riga dove c'è il max e quella dove c'è il min
		MOVE.W	INDMAX,D0
		MOVE.W	INDMIN,D1
		MULU		#M,D0			*linearizzazione matrice: la riga max parte da M*INDMAX
		MULU		#M,D1			*linearizzazione matrice: la riga min parte da M*INDMIN
		MOVEA.L	A0,A1
		ADD		D0,A0
		ADD		D1,A1

		MOVE.W	#M,-(A7)
		MOVE.L	A0,-(A7)	*push indirizzo della riga max
		MOVE.L	A1,-(A7)	*push indirizzo della riga min
		JSR		SWAP
		ADDQ		#8,A7		*pulizia lo stack


LOOP		JMP		LOOP
		

**********************************FUNZIONE DI RICERCA DEL MASSIMO****************************************
FIND_MAX	LINK A6,#0		
		MOVEA.L	OFF_ADDR(A6),A1	*prendo l'indirizzo della matrice
		CLR		D0		*registro contatore righe
		CLR		D1		*registro contatore colonne
		CLR		D2		*indice riga del max
		CLR		D3		*valore max
		CLR		D4		*registro di appoggio per scorrere la matrice
		MOVE.W	OFF_N(A6),D5  *recuperiamo la dimensione righe
		MOVE.W	OFF_M(A6),D6	*recuperiamo dimensione colonne
CHECK_MAX	MOVE.B	(A1,D1),D4	*spostiamo nel registro di appoggio
		CMP.B		D3,D4		*confronto con il max temporaneo; alla prima iterazione D3 contiene 0
		BLS		UPD_IND	*la CMP esegue una sottrazione (fittizia) op_destinazione(D4)-op_sorgente(D3), se D4-D3<0 --> D4<D3, quindi D4 non è sicuramente il max
UPD_MAX	MOVE.B	D4,D3		*aggiorniamo il max temporaneo
		MOVE.B	D0,D2		*aggiorniamo indice max temporaneo
UPD_IND	ADD.B 	#1,D1
		CMP.B		D6,D1		*controlliamo se abbiamo scorso tutta la riga
		BNE		CHECK_MAX   *se non abbiamo finito passiamo alla colonna successiva
		ADD		D6,A1		*se la riga è completata, passiamo alla riga successiva
		CLR.B		D1		*reset dell'indice di colonna
		ADD.B		#1,D0		*incremento dell'indice di riga
		CMP.B		D5,D0		*controlliamo se abbiamo finito la matrice (ultima riga vista)
		BNE		CHECK_MAX
SAVE_MAX	MOVE.W	D3,OFF_MAX(A6)
		MOVE.W	D2,OFF_INDMAX(A6)
		UNLK A6
		RTS		*RTS ritorna al programma chiamante ed ha l'effetto di deallocare automaticamente l'indirizzo dalla cima dello stack


**********************************FUNZIONE DI RICERCA DEL MINIMO****************************************
FIND_MIN	LINK A6,#0	
		MOVEA.L	OFF_ADDR(A6),A1	*prendiamo l'indirizzo della matrice
		CLR		D0			*contatore righe
		CLR		D1			*contatore colonne
		CLR		D2
		CLR		D3			*indice di riga min
		MOVE.B	#100,D3		*min temporaneo
		CLR		D4			*registro di appoggio per scorrere la matrice
		MOVE.W	OFF_N(A6),D5  	*dimensione righe
		MOVE.W	OFF_M(A6),D6		*dimensione colonne
CHECK_MIN	MOVE.B	(A1,D1),D4		*spostamento nel registro di appoggio
		CMP.B		D3,D4			*confronto con min
		BHS		UPD_IND2		
UPD_MIN	MOVE.B	D4,D3		*aggiornamento min
		MOVE.B 	D0,D2		*aggiornamento indice min
UPD_IND2	ADD.B		#1,D1
		CMP.B		D6,D1		*vediamo se abbiamo finito di scorrere la riga
		BNE		CHECK_MIN   *se non abbiamo finito passiamo alla colonna successiva
		ADD		D6,A1
		CLR.B		D1		*se abbiamo finito resettiamo indice di colonna
		ADD.B		#1,D0		*incrementiamo indice di riga
		CMP.B		D5,D0		*controlliamo se abbiamo finito la matrice (ultima riga vista)
		BNE		CHECK_MIN
SAVE_MIN	MOVE.W	D3,OFF_MIN(A6)
		MOVE.W	D2,OFF_INDMIN(A6)
		UNLK		A6
		RTS


**************************************FUNZIONE SCAMBIO RIGHE**********************	
SWAP		LINK 		A6,#0
		MOVEA.L	OFF_IMIN(A6),A1		*indirizzo riga min
		MOVEA.L	OFF_IMAX(A6),A0		*indirizzo riga max
		MOVE.W	OFF_M2(A6),D2		*dim colonne
		CLR.L		D4			*registro di appoggio
		
LOOP2		MOVE.B	(A0),D1  		*D1 REGISTRO DI APPOGGIO
		MOVE.B	(A1),(A0)+
		MOVE.B	D1,(A1)+
		SUBI		#1,D2
		BNE		LOOP2		
		UNLK		A6
		RTS	


		END		MAIN








