00000000                                     1  * Esercizio: Gestione Code
00000000                                     2  * La gestione della struttura dati coda viene effettuata attraverso tre funzioni: inizializzazione, inserimento in coda, estrazione in testa
00000000                                     3  * L'esercizio mostra la gestione di una coda di words (16-bit) che ha capacità massima di QSIZE elementi.
00000000                                     4  * 
00000000                                     5  *La coda e' definita da: descrittore di coda (Queue Descriptor Table) e da un blocco di memoria (Queue Storage Block) per contenere gli elementi
00000000                                     6  *
00000000                                     7  *	QUEUE DESCRIPTOR TABLE					QUEUE STORAGE BLOCK
00000000                                     8  *
00000000                                     9  *	|	QLENG		(long word)	|	    - - - - >          |	(word)		|
00000000                                    10  *	|					|	  |		|			|
00000000                                    11  *	|	QSIZE		(long word)	|	  |		|			|
00000000                                    12  *	|					|	  |		|			|
00000000                                    13  *	|	QTAIL		(long word)	|	  |		|	o	o	|
00000000                                    14  *	|					|	  |		|			|
00000000                                    15  *	|	QHEAD		(long word)	|	  |		|			|
00000000                                    16  *	|					|	  |		|			|
00000000                                    17  *	|	QSTRT		(long word)	| - - - - - 		|			|
00000000                                    18  *	|					|			|			|
00000000                                    19  *	|	QEND		(long word)	|        - - - - - - - - >         |	(word)		|
00000000                                    20  *
00000000                                    21  
00000000                                    22  * Offset degli elementi all'interno della Description Table
00000000  =00000000                         23  QLENG		EQU		0		* lunghezza attuale della coda
00000000  =00000004                         24  QSIZE		EQU		4		* dimensione massima della coda
00000000  =00000008                         25  QTAIL		EQU		8		* indirizzo elemento ultimo della coda
00000000  =0000000C                         26  QHEAD		EQU		12		* indirizzo della testa della coda
00000000  =00000010                         27  QSTRT		EQU		16		* indirizzo iniziale del memory buffer della coda
00000000  =00000014                         28  QEND		EQU		20		* indirizzo finale del memory buffer della coda
00000000                                    29  
00008000                                    30  		ORG		$8000
00008000                                    31  * instanzia un descrittore di una coda di 5 word
00008000  =00000005                         32  Q1SIZE	EQU		5
00008000                                    33  Q1BLK		DS.W		Q1SIZE-1
00008008                                    34  Q1END		DS.W		1
0000800A                                    35  
00008010                                    36  		ORG		$8010
00008010                                    37  Q1DT		DS.L		1		*descrittore della coda contenente 1 longword libera per length,
00008014  00000005                          38  		DC.L		Q1SIZE		*1 longword per la dimensione massima
00008018                                    39  		DS.L		2			*2 longword libera per head e tail
00008020  00008000 00008008                 40  		DC.L		Q1BLK,Q1END	*e l'indirizzo iniziale e finale della memoria dedicata alla coda
00008028                                    41  
00008028  00 00 01 00 01 01 00 00           42  VECTOR1		DC.B		0,0,1,0,1,1,0,0 	*vettore di supporto --> definisce che operazione fare
00008030  19 0A 0F 07 17 01 02 06           43  VECTOR2		DC.B		25,10,15,7,23,1,2,6	*vettore contenente gli elementi da inserire
00008038                                    44  
00008100                                    45  		ORG		$8100
00008100                                    46  * Routine di inizializzazione della coda: 
00008100                                    47  * INPUT: L'indirizzo del descrittore di coda (#Q1DT) passato attraverso A0 
00008100                                    48  
00008100  2F28 0010                         49  QINIT		MOVE.L	QSTRT(A0),-(A7)		*A0 contiene l'indirizzo del DT. Vengono inizializzate Head e Tail nel DT	
00008104  2157 000C                         50  		MOVE.L	(A7),QHEAD(A0)		*con l'indirizzo iniziale dell'area di memoria dedicata alla coda. Si utilizza lo stack 
00008108  215F 0008                         51  		MOVE.L	(A7)+,QTAIL(A0)		*per passare il parametro (indirizzo). Al termine, i campi Head, Tail e Start conterranno lo stasso valore
0000810C  217C 00000000 0000                52  		MOVE.L	#$00,QLENG(A0)		*setto a 0 la lunghezza
00008114  4E75                              53    		RTS
00008116                                    54  
00008116                                    55  
00008116                                    56  * Routine di inserimento in coda:
00008116                                    57  * INPUT:  L'indirizzo del descrittore di coda (#Q1DT) passato attraverso A0
00008116                                    58  *	    la word da accodare passata attraverso D0
00008116                                    59  * OUTPUT: setta Z = 1 (condition code dello SR) se la coda e' piena; altrimenti 0.
00008116                                    60  
00008116  48E7 6040                         61  QENQ		MOVEM.L	D1-D2/A1,-(A7)		*salva i registri usati dalla subroutine
0000811A  4CE8 0006 0000                    62  		MOVEM.L	QLENG(A0),D1-D2	*carico la lunghezza in D1 e la dimensione massima in D2
00008120  B282                              63  		CMP.L		D2,D1			*verifico se la coda è piena
00008122  6700 0020                         64  		BEQ		QENQ2			*se piena Z viene impostato a 1 in automatico e posso saltare a QENQ2
00008126  2268 0008                         65  		MOVEA.L	QTAIL(A0),A1		*scrive in a1 l'indirizzo della coda
0000812A  32C0                              66  		MOVE.W	D0,(A1)+		*inserisce il dato in coda
0000812C  5281                              67  		ADDI.L		#1,D1			*aggiorno la lunghezza della coda
0000812E  2141 0000                         68  		MOVE.L	D1,QLENG(A0)		*memorizzo la lunghezza nel DT
00008132  B3E8 0014                         69  		CMPA.L	QEND(A0),A1		*controllo se l'incremento di A1 eccede il limite del buffer
00008136  6F04                              70  		BLE.S		QENQ1   		*se il limite non è stato superato salto a QENQ1
00008138  2268 0010                         71  		MOVEA.L	QSTRT(A0),A1		*il limite è stato superato--->carico in A1 il primo indirizzo del buffer
0000813C  2149 0008                         72  QENQ1		MOVE.L	A1,QTAIL(A0)		*aggiorno l'indirizzo della coda
00008140  023C 00FB                         73  		ANDI.B		#$FB,CCR		*imposta Z = 0 in quanto la coda non è piena (ANDI opera sul byte - - - X N Z V C)
00008144  4CDF 0206                         74  QENQ2		MOVEM.L	(A7)+,A1/D1-D2	*ripristino dei registri
00008148  4E75                              75  		RTS
0000814A                                    76  		
0000814A                                    77  * Routine per estrarre elementi dalla coda:
0000814A                                    78  * INPUT:  L'indirizzo del descrittore di coda (#Q1DT) passato attraverso A0
0000814A                                    79  * OUTPUT:  setta Z = 1 (condition code dello SR) se la coda e' vuota; altrimenti 0.
0000814A                                    80  *	       la word estratta dalla coda passata in D0.
0000814A                                    81  
0000814A  48E7 4040                         82  QDEQ		MOVEM.L	D1/A1,-(A7)		*salva i registri usati dalla subroutine
0000814E  2228 0000                         83  		MOVE.L	QLENG(A0),D1		*carico la lunghezza attuale in D1
00008152  4A81                              84  		TST.L		D1			*verifico se la coda è vuota
00008154  6700 0020                         85  		BEQ		QDEQ2			*se vuota Z viene impostato a 1 in automatico e posso saltare a QDEQ2
00008158  2268 000C                         86  		MOVEA.L	QHEAD(A0),A1		*copio in a1 l'indirizzo della testa
0000815C  3019                              87  		MOVE.W	(A1)+,D0		*estrazione del dato in testa 
0000815E  5381                              88  		SUBI.L		#1,D1			*aggiorno la lunghezza della coda
00008160  2141 0000                         89  		MOVE.L	D1,QLENG(A0)		*memorizzo la lunghezza nel DT
00008164  B3E8 0014                         90  		CMPA.L	QEND(A0),A1		*controllo se l'incremento di A1 eccede il limite del buffer
00008168  6F04                              91  		BLE.S		QDEQ1			*se il limite non è stato superato salto a QDEQ1
0000816A  2268 0010                         92  		MOVEA.L	QSTRT(A0),A1		*il limite è stato superato-->carico in A1 il primo indirizzo del buffer
0000816E  2149 000C                         93  QDEQ1		MOVE.L	A1,QHEAD(A0)		*aggiorno l'indirizzo della testa
00008172  023C 00FB                         94  		ANDI.B		#$FB,CCR		*imposta Z = 0 in quanto la coda non è vuota (ANDI opera sul byte - - - X N Z V C)
00008176  4CDF 0202                         95  QDEQ2		MOVEM.L	(A7)+,D1/A1		*ripristino dei registri
0000817A  4E75                              96  		RTS
0000817C                                    97  
0000817C                                    98  *************************************************************MAIN******************************************************************************
0000817C                                    99  
0000817C                                   100  * Inizio del programma
0000817C  41F9 00008010                    101  MAIN		LEA.L		Q1DT,A0		*load effective address del descrittore di coda in A0
00008182  4EB9 00008100                    102  		JSR		QINIT		*inizializza la coda
00008188  4201                             103  		CLR.B		D1		*contatore degli elementi del vettore
0000818A  43F9 00008028                    104  		LEA.L		VECTOR1,A1	*load EA del vettore 1 in A1
00008190  45F9 00008030                    105  		LEA.L		VECTOR2,A2	*load EA del vettore 2 in A2
00008196  0C31 0000 1000                   106  LOOP		CMP.B		#0,(A1,D1)
0000819C  6600 0012                        107  		BNE		PRELEVA
000081A0  1032 1000                        108  INSERISCI	MOVE.B		(A2,D1),D0	*passaggio dei parametri tramite registro
000081A4  4EB9 00008116                    109  		JSR		QENQ
000081AA  4EF9 000081B6                    110  		JMP		UPD_IND
000081B0  4EB9 0000814A                    111  PRELEVA		JSR		QDEQ
000081B6  5201                             112  UPD_IND		ADD.B		#1,D1
000081B8  B23C 0008                        113  		CMP.B		#8,D1
000081BC  66D8                             114  		BNE		LOOP
000081BE  4EF9 000081BE                    115  FINE		JMP		FINE					
000081C4                                   116  		
000081C4                                   117  
000081C4                                   118  	
000081C4                                   119            	
000081C4                                   120  		END 		MAIN

No errors detected
No warnings generated
